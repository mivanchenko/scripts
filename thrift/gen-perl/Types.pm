#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

package Error;
use base qw(Thrift::TException);
use base qw(Class::Accessor);
Error->mk_accessors( qw( err_no err_desc ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{err_no} = undef;
  $self->{err_desc} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{err_no}) {
      $self->{err_no} = $vals->{err_no};
    }
    if (defined $vals->{err_desc}) {
      $self->{err_desc} = $vals->{err_desc};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Error';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{err_no});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{err_desc});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Error');
  if (defined $self->{err_no}) {
    $xfer += $output->writeFieldBegin('err_no', TType::I32, 1);
    $xfer += $output->writeI32($self->{err_no});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{err_desc}) {
    $xfer += $output->writeFieldBegin('err_desc', TType::STRING, 2);
    $xfer += $output->writeString($self->{err_desc});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Car;
use base qw(Class::Accessor);
Car->mk_accessors( qw( brand ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{brand} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{brand}) {
      $self->{brand} = $vals->{brand};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Car';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{brand});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Car');
  if (defined $self->{brand}) {
    $xfer += $output->writeFieldBegin('brand', TType::STRING, 1);
    $xfer += $output->writeString($self->{brand});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

1;
